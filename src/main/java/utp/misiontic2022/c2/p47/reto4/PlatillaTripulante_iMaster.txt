/*
 * Pueda usar esta plantilla para la carga del reto a iMaster
 * Copie las clases de los paquetes Modelo, Vista, Controlador y Util
 * No incluya los import de los archivos .java solo las clases
 */
// Importaciones necesarias en iMaster
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;

// Util (No modificar)
class JDBCUtilities {
    private static final String DATABASE_LOCATION = "ProyectosConstruccion.db";

    public static Connection getConnection() throws SQLException {
        String url = "jdbc:sqlite:"+DATABASE_LOCATION;

        return DriverManager.getConnection(url);
    }
}

// Remplace en adelante por las clases de sus archivos .java

// Vista
public class VistaRequerimientosReto4 {

    public static final ControladorRequerimientos controlador = new ControladorRequerimientos();

    public static void requerimiento1(){
        
        try {
            System.out.println("Conocer el id de las compras que si estén pagadas");
            ArrayList<Compras> resultado = controlador.consultarRequerimiento1(); //Esto me retorna un listado de compras
            System.out.println("ID_Compra");
            for(Compras compras:resultado){
                System.out.println(compras.getID_Compra());
            }
        } catch (Exception e) {
            System.err.println(e);
        }
    }

    public static void requerimiento2(){
        try {
            System.out.println("Conocer el id de todas las compras cuyo precio por unidad de su material de construcción sea inferior a 1100");
            ArrayList<Requerimiento_2> resultado = controlador.consultarRequerimiento2(); //Esto me retorna un listado de compras inferior a 1100
            System.out.println("ID_Compra");
            for(Requerimiento_2 compras:resultado){
                System.out.println(compras.getID_Compra());
            }
        } catch (Exception e) {
            System.err.println(e);
        }
    }

    public static void requerimiento3(){
        try {
            System.out.println("Obtener el id de la compra y el año de las compras pagadas parcialmente y en el mes '02'");
            ArrayList<Requerimiento_3> resultado = controlador.consultarRequerimiento3(); //Esto me retorna un listado de compras inferior a 1100
            System.out.println("Id_Proyecto fecha");
            for(Requerimiento_3 i:resultado){
                System.out.print(i.getID_Compra()+" ");
                System.out.println(i.getFecha());
            }
        } catch (Exception e) {
            System.err.println(e);
        }
    }
    
}


// Controlador
public class ControladorRequerimientos {
    // Recomendación: En esta clase controlador Crear un objeto DAO

    ComprasDAO dao = new ComprasDAO(); 
    Requerimiento_2Dao dao2 = new Requerimiento_2Dao();
    Requerimiento_3Dao dao3 = new Requerimiento_3Dao();
    
    public ArrayList<Compras> consultarRequerimiento1() throws SQLException {
        // Su código
        return dao.comprasPagadas(); //Para que aquí yo pueda llamar el metodo. y no crear el objeto dentro de este metodo! 
    }

    public ArrayList<Requerimiento_2> consultarRequerimiento2() throws SQLException {
        return dao2.comprasInferior(); 
    }

    public ArrayList<Requerimiento_3> consultarRequerimiento3() throws SQLException {
        return dao3.compraParcialConFecha();
    }
}



// Modelo
// VO

public class Compras {
    private int ID_Compra; 
    private String Proveedor; 
    private String Pagado; 

    public int getID_Compra() {
        return ID_Compra;
    }
    public void setID_Compra(int iD_Compra) {
        ID_Compra = iD_Compra;
    }
    public String getPagado() {
        return Pagado;
    }
    public void setPagado(String pagado) {
        Pagado = pagado;
    }
    public String getProveedor() {
        return Proveedor;
    }
    public void setProveedor(String proveedor) {
        Proveedor = proveedor;
    }
}


public class Requerimiento_2 {
    private int ID_Compra;

    public void setID_Compra(int iD_Compra) {
        ID_Compra = iD_Compra;
    }
    public int getID_Compra() {
        return ID_Compra;
    }
}


public class Requerimiento_3 {
    private int ID_Compra; 
    private String Fecha; 

    public void setID_Compra(int iD_Compra) {
        ID_Compra = iD_Compra;
    }
    public int getID_Compra() {
        return ID_Compra;
    }
    public void setFecha(String fecha) {
        Fecha = fecha;
    }
    public String getFecha() {
        return Fecha;
    }
}


// DAO
public class ComprasDAO {

    Connection conexion; 

    public ComprasDAO(){ //Este es el constructor! Que hace la conexión con la base de datos 
        try {
            conexion = JDBCUtilities.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
    }


    public ArrayList<Compras> comprasPagadas() throws SQLException { //Retorna el listado de todas las compras que si estén pagadas -> Retorna listado de tipo Compras.java
        ArrayList <Compras> lista = new ArrayList<Compras>();
        String sql = "SELECT ID_Compra FROM Compra WHERE Pagado = 'No' and Proveedor = 'JUMBO'";
        Statement stmt = conexion.createStatement();
        ResultSet resultado = stmt.executeQuery(sql); //Este resultado ya tiene todo el SELECT de arriba -> Todas las compras que hayan pasado el filtro ! 
        while(resultado.next()){
            Compras compra = new Compras(); 
            compra.setID_Compra(resultado.getInt(1));
            //compra.setProveedor(resultado.getString(2));
            lista.add(compra);            
        }
        return lista; 
    }
}

public class Requerimiento_2Dao {
    Connection conexion; 

    public Requerimiento_2Dao(){ //Este es el constructor! Que hace la conexión con la base de datos 
        try {
            conexion = JDBCUtilities.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
        
    }


    public ArrayList<Requerimiento_2> comprasInferior() throws SQLException { //Retorna el listado de todas las compras que si estén pagadas -> Retorna listado de tipo Compras.java
        ArrayList <Requerimiento_2> lista = new ArrayList<Requerimiento_2>();
        String sql = "SELECT ID_Compra FROM Compra c WHERE ID_MaterialConstruccion in (SELECT ID_MaterialConstruccion FROM MaterialConstruccion mc WHERE Precio_Unidad < 1100)";
        Statement stmt = conexion.createStatement();
        ResultSet resultado = stmt.executeQuery(sql); //Este resultado ya tiene todo el SELECT de arriba -> Todas las compras que hayan pasado el filtro ! 
        while(resultado.next()){
            Requerimiento_2 compra = new Requerimiento_2(); 
            compra.setID_Compra(resultado.getInt(1)); //Coge el primer elemento del select (osea el id compra)
            lista.add(compra);            
        }
        return lista; 
    }
}

public class Requerimiento_3Dao {
    Connection conexion; 
    public Requerimiento_3Dao(){
        try {
            conexion = JDBCUtilities.getConnection();
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public ArrayList<Requerimiento_3> compraParcialConFecha() throws SQLException {
        ArrayList <Requerimiento_3> lista = new ArrayList<Requerimiento_3>();
        String sql = "SELECT ID_Proyecto , STRFTIME('%Y',Fecha ) FROM Compra c WHERE Pagado = 'Parcialmente' and Fecha LIKE '_____02%'";
        Statement stmt = conexion.createStatement();
        ResultSet resultado = stmt.executeQuery(sql); //Este resultado ya tiene todo el SELECT de arriba -> Todas las compras que hayan pasado el filtro ! 
        while(resultado.next()){
            Requerimiento_3 compraConsulta = new Requerimiento_3(); 
            compraConsulta.setID_Compra(resultado.getInt(1));//Coge el primer elemento del select (osea el id compra)
            compraConsulta.setFecha(resultado.getString(2));
            lista.add(compraConsulta);            
        }
        return lista; 
    }

}
